"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPercyEnabled;

var _logger = _interopRequireDefault(require("@percy/logger"));

var _percyInfo = _interopRequireDefault(require("./percy-info"));

var _request = _interopRequireDefault(require("./request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Create a socket to connect to a remote logger
async function connectRemoteLogger() {
  await _logger.default.remote(() => {
    let url = _percyInfo.default.address.replace('http', 'ws');

    if (process.env.__PERCY_BROWSERIFIED__) {
      return new window.WebSocket(url);
    } else {
      let socket = new (require('ws'))(url); // allow node to exit with an active connection

      socket.once('open', () => socket._socket.unref());
      return socket;
    }
  });
} // Check if Percy is enabled using the healthcheck endpoint


async function isPercyEnabled() {
  if (_percyInfo.default.enabled == null) {
    let log = (0, _logger.default)('utils');
    let error;

    try {
      let response = await (0, _request.default)('/percy/healthcheck');
      _percyInfo.default.version = response.headers['x-percy-core-version'];
      _percyInfo.default.config = response.body.config;
      _percyInfo.default.enabled = true;
    } catch (e) {
      _percyInfo.default.enabled = false;
      error = e;
    }

    if (_percyInfo.default.enabled && _percyInfo.default.version.major !== 1) {
      log.info('Unsupported Percy CLI version, disabling snapshots');
      log.debug(`Found version: ${_percyInfo.default.version}`);
      _percyInfo.default.enabled = false;
    } else if (!_percyInfo.default.enabled) {
      log.info('Percy is not running, disabling snapshots');
      log.debug(error);
    }

    if (_percyInfo.default.enabled) {
      await connectRemoteLogger();
    }
  }

  return _percyInfo.default.enabled;
}